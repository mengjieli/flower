var MapNet = (function () {


    function MapNet() {
    }

    MapNet.prototype.setData = function (data) {
        this.data = data; //MapData
    }

    /**
     * 设置镜头范围
     * @param data
     */
    MapNet.prototype.setCameraRange = function (x, y, width, height) {
        this.data.camera.viewport.value = {
            x: x,
            y: y,
            width: width,
            height: height
        }
    }

    MapNet.prototype.cameraTweenTo = function (time, x, y, type) {
        this.data.camera.tweenTo = flower.DataManager.createData("dg.CameraMove", {
            time: time,
            x: x,
            y: y,
            type: type
        });
    }

    MapNet.prototype.startGame = function () {
        this.data.start.value = true;
    }

    MapNet.prototype.stop = function () {
        this.data.camera.viewport.value = {
            x: 0,
            y: 0,
            width: this.data.size.width.value,
            height: this.data.size.height.value
        };
        this.data.objects.removeAll();
        this.data.start.value = false;
        this.data.tasks.removeAll();
        this.data.images.removeAll();
        this.data.animations.removeAll();
    }

    /**
     * 刷新怪物
     * @param id 怪物类型
     * @param tag tag
     * @param x
     * @param y
     */
    MapNet.prototype.addMonster = function (id, type, tag, x, y, hp, maxHp) {
        var data = flower.DataManager.createData("dg.MapMonster", {
            id: id,
            type: type,
            tag: tag,
            coord: {
                x: x,
                y: y
            },
            realCoord: {
                x: x,
                y: y
            },
            hp: hp,
            maxHp: maxHp,
            position: {
                x: MapUtils.transPointToPosition(x, y).x,
                y: MapUtils.transPointToPosition(x, y).y,
            }
        });
        data.mapData = this.data;
        this.data.objects.push(data);
    }

    MapNet.prototype.addArmy = function (id, type, tag, x, y, hp, maxHp) {
        var data = flower.DataManager.createData("dg.MapArmy", {
            id: id,
            type: type,
            tag: tag,
            coord: {
                x: x,
                y: y
            },
            realCoord: {
                x: x,
                y: y
            },
            hp: hp,
            maxHp: maxHp,
            position: {
                x: MapUtils.transPointToPosition(x, y).x,
                y: MapUtils.transPointToPosition(x, y).y,
            }
        });
        data.mapData = this.data;
        this.data.objects.push(data);
    }

    MapNet.prototype.removeRole = function (id) {
        this.data.objects.removeItemWith("id", id);
    }

    /**
     * 瞬间移动对象
     * @param id
     * @param x
     * @param y
     */
    MapNet.prototype.transform = function (id, x, y) {
        var army = this.data.objects.getItemWith("id", id);
        if (!army) {
            return;
        }
        army.realCoord.x.value = x;
        army.realCoord.y.value = y;
        army.path.length = 0;
        army.path.push({x: x, y: y, time: 0});
    }

    /**
     * 对象移动到
     * @param id
     * @param x
     * @param y
     */
    MapNet.prototype.moveTo = function (id, x, y, time) {
        var army = this.data.objects.getItemWith("id", id);
        if (!army) {
            return;
        }
        if (army.realCoord.x.value == x && army.realCoord.y.value == y) {
            return;
        }
        army.realCoord.x.value = x;
        army.realCoord.y.value = y;
        army.path.push({x: x, y: y, time: time});
    }

    /**
     * 收到攻击信息
     */
    MapNet.prototype.attackInfo = function (id, hp, aimId) {
        var role = this.data.objects.getItemWith("id", id);
        if (!role) {
            return;
        }
        var aim = this.data.objects.getItemWith("id", aimId);
        var attack = flower.DataManager.createData("dg.Attack", {
            role: role,
            aim: aim,
            hp: hp
        });
        this.data.attacks.push(attack);
        if (!attack.lock.value) {
            this.data.attacks.removeItem(attack);
        }
    }

    /**
     * 更新角色血量
     * @param id
     * @param hp
     */
    MapNet.prototype.roleChangeHp = function (id, hp) {
        var army = this.data.objects.getItemWith("id", id);
        if (!army) {
            return;
        }
        if (army.hpLock.value) {
            army.lockHp.value = hp;
        } else {
            army.hp.value = hp;
        }
    }

    /**
     * 角色死亡
     * @param id
     */
    MapNet.prototype.roleDie = function (id) {
        var army = this.data.objects.getItemWith("id", id);
        if (!army) {
            return;
        }
        army.die.value = true;
        if (!army.lock.value) {
            this.data.objects.removeItem(army);
        }
    }

    MapNet.prototype.receiveTask = function (id, name) {
        var task = flower.DataManager.createData("dg.Task", {id: id, name: name});
        this.data.tasks.push(task);
    }

    MapNet.prototype.completeTask = function (id) {
        var task = this.data.tasks.getItemWith("id", id);
        if (task) {
            task.complete.value = true;
        }
    }

    /**
     * 开始剧情对话
     * @param id
     */
    MapNet.prototype.startDialog = function (id) {
        this.data.dialog.value = id;
        this.data.dialog.value = 0;
    }

    MapNet.prototype.gameOver = function (flag) {
        if (flag) {
            software.Alert.show("恭喜通关");
        } else {
            software.Alert.show("通关失败");
        }
    }

    MapNet.prototype.addAnimation = function (tag, type, url, layer, ease, easeTime, x, y) {
        if (type == 1) { //图片
            var image = flower.DataManager.createData("dg.Image");
            image.tag = tag;
            image.layer = layer;
            image.ease = ease;
            image.easeTime = easeTime;
            image.x = x;
            image.y = y;
            image.url = "res/tools/dungeon/res/image/" + module.ConfigModel.getConfig("image").getItemWith("type", url).url;
            image.config = module.ConfigModel.getConfig("image").getItemWith("type", url);
            this.data.images.push(image);
        } else if (type == 2) { //动画
            var animation = flower.DataManager.createData("dg.Animation");
            animation.tag = tag;
            animation.layer = layer;
            animation.ease = ease;
            animation.easeTime = easeTime;
            animation.x = x;
            animation.y = y;
            var cfg = module.ConfigModel.getConfig("effect").getItemWith("type", url);
            //name,length,frameRate,loop
            animation.config = {
                url: "res/tools/dungeon/res/effect/",
                name: cfg.type + "_000",
                format: "png",
                start: 0,
                end: cfg.length - 1,
                frameRate: cfg.frameRate,
                x: 0,
                y: 0,
                scaleX: 1,
                scaleY: 1,
                loop: cfg.loop
            }
            this.data.animations.push(animation);
        }
    }

    MapNet.prototype.removeAnimation = function (tag, ease, easeTime) {
        if (!this.data.images.removeItemWith("tag", tag)) {
            this.data.animations.removeItemWith("tag", tag);
        }
    }

    MapNet.prototype.hideAll = function () {
        this.data.objects.setItemsAttributeWith("mapType", 1, "visible", false);
    }

    MapNet.prototype.showAll = function () {
        this.data.objects.setItemsAttributeWith("mapType", 1, "visible", true);
    }

    MapNet.prototype.hideGrid = function (points) {
        for (var p = 0; p < points.length; p++) {
            var role = this.data.objects.getItemWith("realCoord.x", points[p].x, "realCoord.y", points[p].y);
            if (role && role.mapType.value == 1) {
                role.visible = false;
            }
        }
    }

    MapNet.prototype.showGrid = function (points) {
        for (var p = 0; p < points.length; p++) {
            var role = this.data.objects.getItemWith("realCoord.x", points[p].x, "realCoord.y", points[p].y);
            if (role && role.mapType.value == 1) {
                role.visible = true;
            }
        }
    }

    return MapNet;
})();


module.MapNet = MapNet;