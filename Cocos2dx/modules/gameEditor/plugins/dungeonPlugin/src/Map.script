var Map = (function (_super) {

    __extends(Map, _super);

    function Map() {
        _super.call(this);

        this.percentWidth = 100;
        this.percentHeight = 100;

        this.init();
    }

    Map.prototype.init = function () {
        //设置网络模拟类，接受触器效果
        this.net = new MapNet();
        //初始后台运行环境
        this.server = new Server(this.net);
        //发送网络的对象
        this.serverNet = new ServerNet(this.server);

        this.initLayer();
        //初始化摄像头
        this.camera = new Camera();
        //添加 update
        flower.EnterFrame.add(this.update, this);
        //添加事件
        this.addListener(flower.TouchEvent.TOUCH_BEGIN, this.onTouch, this);
        this.addListener(flower.TouchEvent.TOUCH_MOVE, this.onTouch, this);
        this.addListener(flower.TouchEvent.TOUCH_END, this.onTouch, this);
        this.addListener(flower.TouchEvent.TOUCH_RELEASE, this.onTouch, this);
        this.addListener(flower.MouseEvent.MOUSE_MOVE, this.onTouch, this);
    }

    /**
     * 初始化层次
     */
    Map.prototype.initLayer = function () {
        this.container = new flower.Sprite();
        this.addChild(this.container);
        //添加背景层
        this.background = new flower.Image();
        this.container.addChild(this.background);
        //添加格子层
        this.gridLayer = new GridLayer();
        this.container.addChild(this.gridLayer);
        //添加底层
        this.bottomLayer = new Layer();
        this.container.addChild(this.bottomLayer);
        //添加交换层
        this.changeLayer = new ChangeLayer();
        this.container.addChild(this.changeLayer);
        //添加顶层
        this.topLayer = new Layer(true);
        this.container.addChild(this.topLayer);
        //ui层
        this.ui = new UILayer(this.serverNet);
        this.addChild(this.ui);
    }

    Map.prototype.setData = function (val) {
        var dungeonData = val;
        this.dungeonData = dungeonData;
        var data = flower.DataManager.createData("dg.MapData");
        data.settings = dungeonData.settings;
        data.background = dungeonData.settings.background;
        _super.prototype.setData.call(this, data);
        this.mapHeight = this.data.size.height.value;
        var cameraData = data.camera;
        cameraData.viewport.value = {
            x: 0,
            y: 0,
            width: this.data.size.width.value,
            height: this.data.size.height.value
        };
        cameraData.width.value = dungeonData.screenWidth.value;
        cameraData.height.value = dungeonData.screenHeight.value;
        dungeonData.screenWidth.addListener(flower.Event.CHANGE, this.onCameraScreenChange, this);
        dungeonData.screenHeight.addListener(flower.Event.CHANGE, this.onCameraScreenChange, this);

        //设置背景
        this.background.bindProperty("source", "{data.settings.background}", [this]);
        //设置镜头数据
        this.camera.setData(this.data.camera, dungeonData.settings);
        //设置其他数据
        this.gridLayer.setData(this.data);
        this.bottomLayer.setData(this.data);
        this.changeLayer.setData(this.data);
        this.topLayer.setData(this.data);
        this.ui.setData(this.data);
        this.ui.width = dungeonData.screenWidth.value;
        this.ui.height = dungeonData.screenHeight.value;

        //设置攻击模块
        this.attackModel = new AttackModel(this.data);

        //设置网络监听对象，与后台(Server)交互
        this.net.setData(this.data);

        //设置后台运行程序
        this.server.setData(dungeonData);
    }

    Map.prototype.update = function (time, dt) {
        var x = -this.data.camera.x.value;
        var y = -this.data.camera.y.value;
        this.container.x = x;
        this.container.y = -y - this.mapHeight + this.data.camera.height.value;
        this.changeLayer.update(dt);
    }

    Map.prototype.onCameraScreenChange = function (e) {
        this.data.camera.width.value = this.dungeonData.screenWidth.value;
        this.data.camera.height.value = this.dungeonData.screenHeight.value;
        this.camera.screenSizeChange();
    }

    Map.prototype.onTouch = function (e) {
        switch (e.type) {
            case flower.TouchEvent.TOUCH_BEGIN:
                this.touchBeginX = e.touchX;
                this.touchBeginY = this.mapHeight - e.touchY;
                this.cameraX = -this.data.camera.x.value;
                this.cameraY = -this.data.camera.y.value;
                this.clickFlag = true;
                break;
            case flower.TouchEvent.TOUCH_MOVE:
                if (Math.abs(e.touchX - this.touchBeginX) > 30 || Math.abs(this.mapHeight - e.touchY - this.touchBeginY) > 30) {
                    this.clickFlag = false;
                }
                this.camera.moveTo(-(this.cameraX - this.touchBeginX + e.touchX), -(this.cameraY - this.touchBeginY + this.mapHeight - e.touchY));
                break;
            case flower.TouchEvent.TOUCH_END:
            case flower.TouchEvent.TOUCH_RELEASE:
                if (this.data.start.value == false) {
                    return;
                }
                if (this.clickFlag) {
                    new ClickModel({
                        x: e.touchX + this.data.camera.x.value,
                        y: this.dungeonData.screenHeight.value - e.touchY + this.data.camera.y.value,
                        mapData: this.data,
                        serverNet: this.serverNet
                    });
                }
                break;
            case flower.MouseEvent.MOUSE_MOVE:
                this.dungeonData.settings.mouseX = e.mouseX + this.data.camera.x.value;
                this.dungeonData.settings.mouseY = this.dungeonData.screenHeight.value - e.mouseY + this.data.camera.y.value;
                break;
        }
    }

    Map.prototype.dispose = function () {
        _super.prototype.dispose.call(this);
        //移除 update
        flower.EnterFrame.del(this.update, this);
    }

    return Map;

})(flower.Group);

UIParser.registerLocalUIClass("Map", Map, "dg");


module.Map = Map;