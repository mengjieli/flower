var Trigger = (function () {

    function Trigger(data, dungeonData, callObject, triggerRunning, startRole) {
        this.data = data;
        this.dungeonData = dungeonData;
        this.callObject = callObject;
        this.triggerRunning = triggerRunning;
        this.startRole = startRole;
        this.time = 0;
        this.over = false;
        this.data.executeTime.value = this.data.executeTime.value + 1;
        this.update(0);
    }

    Trigger.prototype.update = function (dt) {
        if (this.data.hasStop.value || this.over) {
            return;
        }
        this.time += dt;
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (!effect.hasPlay.value && this.data.delay.value <= this.time && effect.invalid.value) {
                this.runEffect(effect);
            }
        }
        if (this.time >= this.data.delay.value && !this.data.hasPlay.value) {
            this.data.hasPlay.value = true;
        }
        if (this.time >= this.data.delay.value) {
            this.over = true;
            if (this.data.executeTime.value < this.data.count.value) {
                this.restart();
            }
        }
    }

    Trigger.prototype.restart = function () {
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (effect.hasPlay.value) {
                effect.hasPlay.value = false;
            }
        }
        this.time = 0;
        this.data.hasPlay.value = false;
        this.data.hasStop.value = false;
        this.update(0);
    }

    Trigger.prototype.stop = function () {
        if (this.time != 0) {
            return;
        }
        this.over = true;
    }

    Trigger.prototype.runEffect = function (effect) {
        effect.hasPlay.value = true;
        var value = effect.effectValue;
        switch (effect.type.value) {
            case 1:
                for (var i = 0; i < value.monsters.length; i++) {
                    var monster = value.monsters[i];
                    this.triggerRunning.addMonster(monster);
                }
                break;
            case 4:
                this.triggerRunning.runTrigger(value.operate.value, value.triggerId.value);
                break;
            case 5:
                this.triggerRunning.gameOver(true);
                break;
            case 6:
                this.triggerRunning.gameOver(false);
                break;
            case 7:
                this.callObject.completeTask(value.missionId.value);
                break;
            case 9:
                this.callObject.cameraTweenTo(value.time.value, value.coord.x.value, value.coord.y.value, value.pos.value);
                break;
            case 10:
                this.callObject.setCameraRange(value.rect.x.value, value.rect.y.value, value.rect.width.value, value.rect.height.value);
                break;
            case 11:
                this.triggerRunning.addDialog(this.data);
                this.callObject.startDialog(value.dialogId.value,value.param1.value,value.param2.value,value.param3.value,value.param4.value);
                break;
            case 12:
                this.callObject.addAnimation(value.tag.value, value.type.value, value.url.value, value.layer.value, value.ease.value, value.easeTime.value, value.x.value, value.y.value);
                //this.triggerRunning.gameStart();
                //this.callObject.startGame();
                break;
            case 13:
                this.callObject.removeAnimation(value.tag.value, value.ease.value, value.easeTime.value);
                break;
            case 14:
                //范围伤害
                var range = value.range.value;
                var damage = value.damage.value;
                var x = value.x.value;
                var y = value.y.value;
                var points = [{x: x, y: y}];
                for (var i = 1; i <= range; i++) {
                    points = points.concat(MapUtils.getRoundPoints(x, y, range));
                }
                for (var i = 0; i < points.length; i++) {
                    x = points[i].x;
                    y = points[i].y;
                    var role = this.triggerRunning.getRoleAt(x, y);
                    if (role) {
                        role.changeHp(-damage, null);
                    }
                }
                break;
            case 15:
                //传送部队
                var roles = this.startRole.type == 0 ? this.triggerRunning.armys : this.triggerRunning.monsters;
                var points = [{x: value.x.value, y: value.y.value}];
                var range = 1;
                var r = 0;
                while (r < roles.length) {
                    var role = roles[r];
                    var find = false;
                    var point = null;
                    while (find == false) {
                        if (!points.length) {
                            points = MapUtils.getRoundPoints(value.x.value, value.y.value, range);
                            range++;
                        }
                        point = points.pop();
                        if (this.triggerRunning.path.canMove(point.x, point.y)) {
                            find = true;
                            role.transformTo(point.x, point.y);
                            range = 1;
                            points = [{x: value.x.value, y: value.y.value}];
                        }
                    }
                    r++;
                }
                break;
            case 16:
                this.triggerRunning.path.addBlocks(value.points.value);
                break;
            case 17:
                this.triggerRunning.path.removeBlocks(value.points.value);
                break;
            case 18:
                this.dungeonData.settings.playerRunFlag.value = false;
                break;
            case 19:
                this.dungeonData.settings.playerRunFlag.value = true;
                break;
            case 20:
                this.callObject.hideAll(value.type.value);
                break;
            case 21:
                this.callObject.showAll(value.type.value);
                break;
            case 22:
                this.callObject.hideGrid(value.points.value);
                break;
            case 23:
                this.callObject.showGrid(value.points.value);
                break;
        }
    }

    Trigger.prototype.checkDialog = function (id) {
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (effect.hasPlay.value && effect.type.value == 11 && effect.effectValue.dialogId.value == id) {
                this.triggerRunning.runTrigger(0, effect.effectValue.triggerId.value);
                return;
            }
        }
    }

    Trigger.prototype.hasMinsterNoShowWithTag = function (tag) {
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (!effect.hasPlay.value && effect.type.value == 1) {
                var monsters = effect.effectValue.monsters;
                if (monsters.getItemWith("tag", tag)) {
                    return true;
                }
            }
        }
        return false;
    }

    Trigger.prototype.hasTriggerMonsterNoShow = function () {
        for (var i = 0; i < this.data.effects.length; i++) {
            var effect = this.data.effects[i];
            if (!effect.hasPlay.value && effect.type.value == 1) {
                var monsters = effect.effectValue.monsters;
                if (monsters.length) {
                    return true;
                }
            }
        }
        return false;
    }

    Trigger.prototype.dispose = function () {
        this.data.hasPlay.value = false;
        this.data.hasStop.value = false;
        for (var i = 0; i < this.data.effects.length; i++) {
            this.data.effects[i].hasPlay.value = false;
        }
    }

    return Trigger;
})();


module.Trigger = Trigger;