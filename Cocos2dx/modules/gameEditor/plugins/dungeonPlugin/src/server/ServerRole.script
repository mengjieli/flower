var ServerRole = (function () {

    function ServerRole(settings, id, data, dungeonData, callObject, triggerRunning, serverPath) {
        this.id = id;
        this.data = data;
        this.dungeonData = dungeonData;
        this.callObject = callObject;
        this.triggerRunning = triggerRunning;
        this.serverPath = serverPath;

        this.type = 0;

        this.x = data.bornCoord.x.value;
        this.y = data.bornCoord.y.value;
        serverPath.addRoler(this, this.x, this.y);

        this.moveGap = 750;

        //移动相关信息
        this.moveFlag = false;
        this.moveX = 0;
        this.moveY = 0;
        this.movePath = null;
        this.moveTime = 0;

        //攻击相关信息
        this.attackFlag = false;
        this.attackAim = null;
        this.attackAimX = 0;
        this.attackAimY = 0;
        this.attackPointX = 0;
        this.attackPointY = 0;
        this.attackPath = null;
        this.attackRange = 1;
        this.attackConstGap = 1000;
        this.attackTime = 0;

        this.hasDie = false;
        this.playerOperate = false;

        this.ai = 0;
    }

    ServerRole.prototype.update = function (dt) {
        this.moveTime += dt;
        this.attackTime += dt;
        if (this.attackFlag) {
            if (this.attackAim.hasDie) {
                this.attackFlag = false;
                if (this.ai == 4) {
                    this.searchEnemy(5);
                }
                return;
            }
            if (MapUtils.getDistance(this.x, this.y, this.attackAim.x, this.attackAim.y) <= this.attackRange) {
                if (this.attackTime >= this.attackConstGap && this.moveTime >= this.moveGap) {
                    this.attackTime = 0;
                    this.hurtAttackAim();
                }
            } else {
                var attackPointInfo;
                var attackPoint;
                if (this.moveTime > this.moveGap) {
                    if (!this.attackPath || this.attackAimX != this.attackAim.x || this.attackAimY != this.attackAim.y || !this.serverPath.canPathMove(this.attackPath)) {
                        attackPointInfo = this.getAttackPoint(this.x, this.y, this.attackAim.x, this.attackAim.y, this.attackRange);
                        if (attackPointInfo.attackPoint == null) {
                            return;
                        }
                        this.attackAimX = this.attackAim.x;
                        this.attackAimY = this.attackAim.y;
                        this.attackPointX = attackPointInfo.attackPoint.x;
                        this.attackPointY = attackPointInfo.attackPoint.y;
                        this.attackPath = attackPointInfo.path;
                    }
                    if (this.attackPath && this.attackPath.length) {
                        point = this.attackPath[0];
                        if (this.serverPath.canMove(point.x, point.y)) {
                            this.attackPath.shift();
                            this.moveTime = 0;
                            this.serverPath.removeRoler(this, this.x, this.y);
                            this.x = point.x;
                            this.y = point.y;
                            this.serverPath.addRoler(this, this.x, this.y);
                            this.callObject.moveTo(this.id, this.x, this.y, this.moveGap);
                        }
                    }
                }
            }
        } else {
            if (!this.playerOperate) {
                if (this.ai == 1 || this.ai == 2 || this.ai == 4) {
                    var enemys = this.triggerRunning.getEnemyList(this.type);
                    var range = {1: 3, 2: 5, 4: 10}[this.ai];
                    if (enemys) {
                        for (var i = 0; i < enemys.length; i++) {
                            if (MapUtils.getDistance(this.x, this.y, enemys[i].x, enemys[i].y) <= range) {
                                this.attack(enemys[i]);
                                break;
                            }
                        }
                    }
                }
            }
            if (this.moveFlag) {
                if (!this.movePath || !this.movePath.length) {
                    this.movePath = this.serverPath.findPath(this.x, this.y, this.moveX, this.moveY);
                }
                if (this.movePath && this.movePath.length) {
                    if (this.moveTime > this.moveGap) {
                        var point = this.movePath[0];
                        if (!this.serverPath.canMove(point.x, point.y)) {
                            //this.data.hasPlay.value = false;
                            this.movePath = this.serverPath.findPath(this.x, this.y, this.moveX, this.moveY);
                        }
                        if (this.movePath && this.movePath.length) {
                            point = this.movePath[0];
                            if (this.serverPath.canMove(point.x, point.y)) {
                                this.movePath.shift();
                                this.moveTime = 0;
                                this.serverPath.removeRoler(this, this.x, this.y);
                                this.x = point.x;
                                this.y = point.y;
                                this.callObject.moveTo(this.id, this.x, this.y, this.moveGap);
                                this.serverPath.addRoler(this, this.x, this.y);
                                if (this.x == this.moveX && this.y == this.moveY) {
                                    this.moveFlag = false;
                                    if (this.playerOperate) {
                                        this.playerOperate = false;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    ServerRole.prototype.changeHp = function (hp, attackAim) {
        if (attackAim && this.ai != 3) {
            if (!this.playerOperate) {
                this.attack(attackAim);
            }
        }
        this.hp += hp;
        if (this.hp <= 0) {
            this.hp = 0;
        }
        this.callObject.roleChangeHp(this.id, this.hp);
        if (this.hp == 0) {
            this.hasDie = true;
            this.callObject.roleDie(this.id);
            if (this.type == 0) {
                this.triggerRunning.armyDieCount++;
                this.triggerRunning.dieCount++;
            } else {
                this.triggerRunning.monsterDieCount++;
            }
            this.serverPath.removeRoler(this, this.x, this.y);
            var triggers = this.dungeonData.triggers;
            for (var t = 0; t < triggers.length; t++) {
                var trigger = triggers[t];
                if (trigger.executeTime.value < trigger.count.value && trigger.openFlag.value && !trigger.hasPlay.value && trigger.startCondition.value == 6) {
                    var startValue = trigger.startValue;
                    var type = startValue.type.value;
                    if (type == 0 && this.triggerRunning.armyDieCount >= startValue.count.value || type == 1 && this.triggerRunning.monsterDieCount >= startValue.count.value) {
                        this.triggerRunning.addTrigger(trigger, this.dungeonData, this.callObject, this.triggerRunning);
                    }
                }
                if (trigger.executeTime.value < trigger.count.value && trigger.openFlag.value && !trigger.hasPlay.value && trigger.startCondition.value == 7) {
                    var startValue = trigger.startValue;
                    var index = startValue.tags.getItemIndex(this.data.tag.value);
                    if (index != -1) {
                        startValue.dieTags[index].value = true;
                    }
                    if (startValue.dieTags.getItemIndex(false) == -1) {
                        this.triggerRunning.addTrigger(trigger, this.dungeonData, this.callObject, this.triggerRunning);
                    }
                }
            }
        }
        var triggers = this.dungeonData.triggers;
        for (var t = 0; t < triggers.length; t++) {
            var trigger = triggers[t];
            if (trigger.executeTime.value < trigger.count.value && trigger.openFlag.value && !trigger.hasPlay.value && trigger.startCondition.value == 3) {
                var startValue = trigger.startValue;
                var tag = startValue.tag.value;
                var hp = startValue.hp.value;
                if (this.triggerRunning.hasTriggerMonsterNoShowWithTag(tag)) {
                    continue;
                }
                var monsters = this.triggerRunning.getMonsterByTag(tag);
                var flag = false;
                for (var i = 0; i < monsters.length; i++) {
                    if (monsters[i].hp / monsters[i].maxHp <= hp) {
                        flag = true;
                        break;
                    }
                }
                if (flag) {
                    this.triggerRunning.hasTriggerMonsterNoShowWithTag(tag);
                    this.triggerRunning.addTrigger(trigger, this.dungeonData, this.callObject, this.triggerRunning);
                }
            }
        }
    }

    ServerRole.prototype.hurtAttackAim = function () {
        if (this.attackAim) {
            this.callObject.attackInfo(this.id, this.attackValue, this.attackAim.id);
            this.attackAim.changeHp(-this.attackValue, this);
            if (this.attackAim.hasDie) {
                this.attackFlag = false;
                if (this.ai == 4) {
                    this.searchEnemy(5);
                }

            }
        }
    }

    ServerRole.prototype.searchEnemy = function (range) {
        var enemys = this.triggerRunning.getEnemyList(this.type);
        if (enemys) {
            for (var i = 0; i < enemys.length; i++) {
                if (MapUtils.getDistance(this.x, this.y, enemys[i].x, enemys[i].y) <= range) {
                    this.attack(enemys[i]);
                    break;
                }
            }
        }
    }

    /**
     * 获取可以攻击的点
     */
    ServerRole.prototype.getAttackPoint = function (x, y, aimX, aimY, attackRange) {
        var points = [];
        attackRange = attackRange || 1;
        for (var i = 1; i < attackRange + 1; i++) {
            points = points.concat(MapUtils.getRoundPoints(aimX, aimY, i));
        }
        for (var i = 0; i < points.length; i++) {
            points[i] = {
                point: points[i],
                distance: MapUtils.getDistance(x, y, points[i].x, points[i].y) + Math.abs(points[i].x - x) + Math.abs(points[i].y - y)
            }
        }
        points.sort(function (a, b) {
            return a.distance > b.distance ? true : false;
        });
        var nearPoint = points[0].point;
        var attackPoint;
        var path;
        for (var i = 0; i < points.length; i++) {
            if (this.serverPath.canMove(points[i].point.x, points[i].point.y)) {
                attackPoint = points[i].point;
                if (attackPoint.x == x && attackPoint.y == y) {
                    path = [];
                } else {
                    path = this.serverPath.findPath(x, y, attackPoint.x, attackPoint.y);
                    if (!path || !path.length) {
                        path = null;
                    }
                }
                if (!path) {
                    attackPoint = null;
                } else {
                    break;
                }
            }
        }
        return {
            nearPoint: nearPoint,
            attackPoint: attackPoint,
            path: path
        }
    }

    /**
     * 移动到哪里
     * @param x
     * @param y
     */
    ServerRole.prototype.moveTo = function (x, y, playerOperate) {
        if (playerOperate == null) {
            playerOperate = true;
        }
        if (!this.serverPath.canMove(x, y)) {
            return;
        }
        this.moveFlag = true;
        this.attackFlag = false;
        this.moveX = x;
        this.moveY = y;
        this.movePath = this.serverPath.findPath(this.x, this.y, x, y);
        this.playerOperate = playerOperate;
    }

    ServerRole.prototype.transformTo = function (x, y) {
        this.moveFlag = false;
        this.attackFlag = false;
        this.playerOperate = false;
        this.movePath = [];
        this.serverPath.removeRoler(this, this.x, this.y);
        this.x = x;
        this.y = y;
        this.callObject.transform(this.id, x, y);
        this.serverPath.addRoler(this, this.x, this.y, false);
    }

    /**
     * 攻击对象
     * @param aim
     */
    ServerRole.prototype.attack = function (aim) {
        this.moveFlag = false;
        this.attackFlag = true;
        this.attackAim = aim;
        this.attackAimX = aim.x;
        this.attackAimY = aim.y;
        this.attackPath = null;
    }

    ServerRole.prototype.dispose = function () {
        this.callObject.removeRole(this.id);
    }

    return ServerRole;
})
();

module.ServerRole = ServerRole;