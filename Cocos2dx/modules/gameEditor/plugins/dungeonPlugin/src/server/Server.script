var Server = (function () {

    function Server(callObject) {
        this.triggers = [];
        this.callObject = callObject;
        //运行时间
        this.time = 0;
        //是否初始化过
        this.hasInit = false;
        //怪物列表
        this.monsters = [];
        //角色部队列表
        this.armys = [];
        this.gameStartFlag = false;

        this.roleId = 0;
    }

    Server.prototype.setData = function (data) {
        this.data = data; // DungeonData
        if (this.data.settings.isPlaying.value) {
            this.start();
        }
        this.data.settings.reset.addListener(flower.Event.UPDATE, function (e) {
            this.stop();
        }, this);
        this.data.settings.isPlaying.addListener(flower.Event.UPDATE, function (e) {
            if (this.data.settings.isPlaying.value) {
                if (!this.hasInit) {
                    this.start();
                } else {
                    this.play();
                }
            } else {
                this.pause();
            }
        }, this);
        this.path = new ServerPath(this.data, this.monsters, this.armys,this.callObject, this);
    }

    /**
     * 重新开始
     */
    Server.prototype.start = function () {
        this.stop(true);
        this.time = 0;
        this.hasInit = true;

        var triggers = this.data.triggers;
        for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];
            trigger.openFlag = trigger.open.value;
            if (trigger.startCondition.value == 7) {
                var startValue = trigger.startValue;
                startValue.dieTags.length = 0;
                for (var d = 0; d < startValue.tags.length; d++) {
                    startValue.dieTags.push(new flower.BooleanValue(false));
                }
            }
        }

        //运行
        flower.EnterFrame.add(this.update, this);
        this.gameStartFlag = false;
        this.sendAllTask();
        this.dieCount = 0;


        this.gameStart();
        this.callObject.startGame();
    }

    Server.prototype.gameStart = function () {
        this.gameStartFlag = true;
    }

    Server.prototype.stop = function (notSetPlaying) {
        while (this.triggers.length) {
            this.triggers.pop().dispose();
        }
        while (this.monsters.length) {
            this.monsters.pop().dispose();
        }
        while (this.armys.length) {
            this.armys.pop().dispose();
        }
        flower.EnterFrame.remove(this.update, this);
        this.data.settings.time.value = 0;
        this.time = 0;
        if (!notSetPlaying) {
            this.data.settings.isPlaying = false;
        }
        this.callObject.stop();
        this.path.reset();
        this.gameStartFlag = false;
        this.hasInit = false;
        this.gameOverFlag = false;
    }

    /**
     * 暂停
     */
    Server.prototype.pause = function () {
        flower.EnterFrame.remove(this.update, this);
    }

    /**
     * 继续播放
     */
    Server.prototype.play = function () {
        flower.EnterFrame.add(this.update, this);
    }

    Server.prototype.update = function (now, dt) {
        if (this.time == 0) {
            var data = flower.DataManager.createData("dg.FlushMonsterEffectItem");
            data.bornCoord.x.value = this.data.settings.bornX.value;
            data.bornCoord.y.value = this.data.settings.bornY.value;
            this.addArmy(data);
        }
        this.time += dt;
        this.data.settings.time.value = this.time;
        var triggers = this.data.triggers;
        for (var i = 0; i < this.triggers.length; i++) {
            this.triggers[i].update(dt);
        }
        if (this.gameStartFlag && this.gameOverFlag == false) {
            for (var i = 0; i < this.monsters.length; i++) {
                if (this.monsters[i].hasDie) {
                    this.monsters.splice(i, 1);
                    i--;
                } else {
                    this.monsters[i].update(dt);
                }
            }
            for (var i = 0; i < this.armys.length; i++) {
                this.armys[i].update(dt);
            }
        }
        for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];
            if (trigger.openFlag.value && !this.hasTrigger(trigger.itemId.value) && trigger.startCondition.value == 1) {
                this.triggers.push(new Trigger(trigger, this.data, this.callObject, this));
            }
        }
    }

    Server.prototype.gameOver = function (flag) {
        if (this.gameOverFlag) {
            return;
        }
        this.gameOverFlag = true;
        if (flag) {
            var triggers = this.data.triggers;
            for (var i = 0; i < triggers.length; i++) {
                var trigger = triggers[i];
                if (!trigger.hasPlay.value && trigger.startCondition.value == 4) {
                    var triggerValue = trigger.startValue;
                    if (trigger.openFlag.value && (triggerValue.type.value == 0 && this.dieCount < triggerValue.param.value ||
                        triggerValue.type.value == 1 && this.time < triggerValue.param.value ||
                        triggerValue.type.value == 2)) {
                        this.triggers.push(new Trigger(trigger, this.data, this.callObject, this));
                    }
                }
            }
        }
        this.callObject.gameOver(flag);
    }

    Server.prototype.runTrigger = function (operate, triggerId) {
        var triggers = this.data.triggers;
        if (operate == 0) {
            for (var i = 0; i < triggers.length; i++) {
                var trigger = triggers[i];
                if (trigger.itemId.value == triggerId) {
                    if (!this.hasTrigger(triggerId)) {
                        trigger.openFlag = true;
                        if(trigger.startCondition.value == 5) {
                            this.triggers.push(new Trigger(trigger, this.data, this.callObject, this));
                        }
                    } else {
                        for (var t = 0; t < this.triggers.length; t++) {
                            if (this.triggers[t].data.itemId.value == triggerId) {
                                this.triggers[t].restart();
                                break;
                            }
                        }
                    }
                    break;
                }
            }
        } else if (operate == 1) {
            for (var t = 0; t < this.triggers.length; t++) {
                if (this.triggers[t].data.itemId.value == triggerId) {
                    this.triggers[t].stop();
                    break;
                }
            }
        }
    }

    /**
     * 添加怪物
     * @param data FlushMonsterEffectItem
     */
    Server.prototype.addMonster = function (data) {
        this.monsters.push(new ServerMonster(this.data.settings, this.roleId++ + 1000, data, this.data, this.callObject, this, this.path));
    }

    /**
     * 添加角色部队
     * @param data FlushMonsterEffectItem
     */
    Server.prototype.addArmy = function (data) {
        this.armys.push(new ServerArmy(this.data.settings, this.roleId++ + 1000000, data, this.data, this.callObject, this, this.path));
    }

    Server.prototype.getEnemyList = function (type) {
        if (type == 0) {
            return this.monsters;
        } else if (type == 1) {
            return this.armys;
        }
    }

    /**
     * 角色移动到
     * @param id
     * @param x
     * @param y
     */
    Server.prototype.rolerMoveTo = function (id, x, y) {
        var army = this.getArmy(id);
        if (army) {
            army.moveTo(x, y);
        }
    }

    Server.prototype.getArmy = function (id) {
        for (var i = 0; i < this.armys.length; i++) {
            if (this.armys[i].id == id) {
                return this.armys[i];
            }
        }
    }

    Server.prototype.getMonster = function (id) {
        for (var i = 0; i < this.monsters.length; i++) {
            if (this.monsters[i].id == id) {
                return this.monsters[i];
            }
        }
    }

    Server.prototype.getMonsterByTag = function (tag) {
        var list = [];
        for (var i = 0; i < this.monsters.length; i++) {
            if (this.monsters[i].data.tag.value == tag) {
                list.push(this.monsters[i]);
            }
        }
        return list;
    }

    Server.prototype.hasTrigger = function (triggerId) {
        for (var i = 0; i < this.triggers.length; i++) {
            if (this.triggers[i].data.itemId.value == triggerId) {
                return true;
            }
        }
        return false;
    }

    Server.prototype.hasTriggerMonsterNoShowWithTag = function (tag) {
        var triggers = this.data.triggers;
        for (var t = 0; t < triggers.length; t++) {
            var trigger = triggers[t];
            if (trigger.hasPlay.value == true) {
                continue;
            }
            var effects = trigger.effects;
            for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                if (effect.type.value == 1) {
                    var monsters = effect.effectValue.monsters;
                    if (monsters.getItemWith("tag", tag)) {
                        return true;
                    }
                }
            }
        }
        for (var i = 0; i < this.triggers.length; i++) {
            if (this.triggers[i].hasMinsterNoShowWithTag(tag)) {
                return true;
            }
        }
        return false;
    }

    Server.prototype.hasTriggerMonsterNoShow = function () {
        var triggers = this.data.triggers;
        for (var t = 0; t < triggers.length; t++) {
            var trigger = triggers[t];
            if (trigger.hasPlay.value == true) {
                continue;
            }
            var effects = trigger.effects;
            for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                if (effect.type.value == 1) {
                    var monsters = effect.effectValue.monsters;
                    if (monsters.length) {
                        return true;
                    }
                }
            }
        }
        for (var i = 0; i < this.triggers.length; i++) {
            if (this.triggers[i].hasTriggerMonsterNoShow()) {
                return true;
            }
        }
        return false;
    }

    Server.prototype.isAllDie = function (type) {
        if (type == 0) {
            for (var i = 0; i < this.armys.length; i++) {
                if (this.armys[i].hasDie == false) {
                    return false;
                }
            }
            return true;
        } else if (type == 1) {
            for (var i = 0; i < this.monsters.length; i++) {
                if (this.monsters[i].hasDie == false) {
                    return false;
                }
            }
            if (this.hasTriggerMonsterNoShow()) {
                return false;
            }
            return true;
        }
    }

    Server.prototype.sendAllTask = function () {
        var triggers = this.data.triggers;
        for (var t = 0; t < triggers.length; t++) {
            var trigger = triggers[t];
            var effects = trigger.effects;
            for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                if (effect.type.value == 7) {
                    this.callObject.receiveTask(effect.effectValue.missionId.value, effect.effectValue.missionName.value);
                }
            }
        }
    }

    Server.prototype.attack = function (id, aimId) {
        var army = this.getArmy(id);
        var monster = this.getMonster(aimId);
        if (army && monster) {
            army.attack(monster);
        }
    }

    Server.prototype.completeDialog = function (id) {
        for (var i = 0; i < this.triggers.length; i++) {
            if (this.triggers[i].checkDialog(id)) {
                return;
            }
        }
    }


    return Server;
})();


module.Server = Server;