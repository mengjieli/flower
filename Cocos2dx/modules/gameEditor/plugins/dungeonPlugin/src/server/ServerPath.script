var ServerPath = (function () {

    function ServerPath(dungeonData, monsters, armys,callObject, server) {
        this.dungeonData = dungeonData;
        this.monsters = monsters;
        this.armys = armys;
        this.callObject = callObject;
        this.server = server;

        this.astar = new AStarSix();
        this.blocks = [];
        this.width = MapUtils.blockWidth;
        this.height = MapUtils.blockHeight;
        for (var y = 0; y < this.height; y++) {
            for (var x = 0; x < this.width; x++) {
                this.blocks.push({
                    path: 1,
                    list: []
                });
            }
        }
        this.astar.setBlocks(this.blocks, MapUtils.blockWidth, MapUtils.blockHeight, 0, 0);
    }

    ServerPath.prototype.removeRoler = function (roler, x, y) {
        var block = this.blocks[y * this.width + x];
        var list = block.list;
        for (var i = 0; i < list.length; i++) {
            if (list[i] == roler) {
                block.path++;
                list.splice(i, 1);
                break;
            }
        }
    }

    ServerPath.prototype.addRoler = function (roler, x, y) {
        var block = this.blocks[y * this.width + x];
        var list = block.list;
        for (var i = 0; i < list.length; i++) {
            if (list[i] == roler) {
                return;
            }
        }
        block.path--;
        list.push(roler);

        var triggers = this.dungeonData.triggers;
        for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];
            if (trigger.openFlag.value && !trigger.hasPlay.value && trigger.startCondition.value == 2) {
                var startValue = trigger.startValue;
                if (roler.type == startValue.armyType.value && startValue.points.getItemWith("x", x, "y", y)) {
                    this.server.triggers.push(new Trigger(trigger, this.dungeonData, this.callObject, this.server));
                }
            }
        }
    }

    ServerPath.prototype.reset = function () {
        for (var i = 0; i < this.blocks.length; i++) {
            this.blocks[i] = {
                path: 1,
                list: []
            }
        }
    }

    ServerPath.prototype.canMove = function (x, y) {
        return this.blocks[y * this.width + x].path == 1 ? true : false
    }

    ServerPath.prototype.canPathMove = function (path) {
        var flag = true;
        for(var i = 0; i < path.length; i++) {
            if(!this.canMove(path[i].x,path[i].y)) {
                flag = false;
                break;
            }
        }
        return flag;
    }

    ServerPath.prototype.findPath = function (startX, startY, endX, endY) {
        return this.astar.findPath(startX, startY, endX, endY);
    }


    return ServerPath;
})();


module.ServerPath = ServerPath;