var DungeonParser = (function (_super) {

    __extends(DungeonParser, _super);

    function DungeonParser(file) {
        _super.call(this, file);
    }

    DungeonParser.prototype.load = function () {
        var config = this.file.content;
        this.data = flower.DataManager.createData("dg.DungeonData", config);
        this.loadBackground();
        return true;
    }

    DungeonParser.prototype.loadBackground = function () {
        (new flower.Direction("res/tools/dungeon/background")).readDirectionList(function (list) {
            var enumList = [];
            var find = false;
            for (var i = 0; i < list.length; i++) {
                if (list[i].fileType == "jpg" || list[i].fileType == "png") {
                    if (this.data.settings.background.value == list[i].path) {
                        find = true;
                    }
                    enumList.push({
                        label: list[i].name,
                        type: list[i].path
                    });
                }
            }
            if (!find) {
                this.data.settings.background.value = enumList[0].type;
            }
            this.data.settings.background.enumList = enumList;
            this.loadConfig();
        }, this);
    }

    DungeonParser.prototype.loadConfig = function () {
        var model = ConfigModel.getInstance();
        model.once(flower.Event.COMPLETE, function (e) {
            this.dispatchWith(flower.Event.COMPLETE);
        }, this);
        model.load();
    }

    DungeonParser.prototype.onLoadComplete = function (e) {
        this.dispatch(e);
    }

    DungeonParser.prototype.onLoadError = function (e) {
        this.dispatch(e);
    }

    DungeonParser.prototype.save = function () {
        var path = this.file.path;
        (new flower.File(path)).saveText(flower.ObjectDo.toString(this.data.value, 100000000));
    }

    Object.defineProperty(DungeonParser.prototype, "itemId", {
        get: function () {
            this.data.itemId.value = this.data.itemId.value + 1;
            return this.data.itemId.value;
        },
        set: function (val) {
        },
        enumerable: true,
        configurable: true
    });


    return DungeonParser;

})(editor.Parser);

module.DungeonParser = DungeonParser;
registerParser("Dungeon", DungeonParser);