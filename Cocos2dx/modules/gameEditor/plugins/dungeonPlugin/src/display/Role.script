var Role = (function (_super) {

    __extends(Role, _super);

    function Role(data) {
        _super.call(this, data);
        this.data = data;

        this.width = 0;

        //var label = new flower.Label(data.type.value + "-" + data.tag.value + "-" + data.id.value);
        var label = new flower.Label(data.type.value + "-" + data.tag.value);
        label.fontColor = 0xffffff;
        label.horizontalCenter = 0;
        label.y = 10;
        label.alpha = 0.75;
        this.addChild(label);
        this.name = label;

        this.container = new flower.Sprite();
        this.addChild(this.container);

        this.blood = new RoleBlood(data);
        this.blood.y = -56;
        this.addChild(this.blood);


        this.action = null;
        this.dir = null;
        this.show = null;

        flower.Tween.to(this, 0.5, {alpha: 1}, null, {alpha: 0});

        if (data.mapData.start.value == false) {
            this.name.alpha = 0;
            data.mapData.start.once(flower.Event.UPDATE, function (e) {
                flower.Tween.to(this.name, 0.5, {alpha: 1});
            }, this);
        }

        this.moveFlag = false;
        this.data.path.addListener(flower.Event.UPDATE, this.onPathChange, this);
        this.data.mapData.getObject.count.addListener(flower.Event.UPDATE, this.getObject, this);

        this.bindProperty("visible", "{this.data.visible}");

        this.init();
    }

    Role.prototype.init = function () {
        this.playAction(Role.Action.STAND, Role.Dir.Right);
    }

    Role.prototype.getObject = function (e) {
        if (this.data.die.value == false && this.data.mapData.getObject.id.value == this.data.id.value) {
            this.data.mapData.getObject.mapObject = this;
        }
    }

    Role.prototype.startAttack = function (attack, aimObject) {
        this.playAction(Role.Action.ATTACK, attack.aim ? MapUtils.getDirection(attack.role.position.x.value, attack.role.position.y.value, attack.aim.position.x.value, attack.aim.position.y.value) : this.dir, 1);
        if (aimObject) {
            setTimeout(function () {
                aimObject.beAttack(attack, this);
            }.bind(this), 500);
        } else {
            attack.lock.value = false;
        }
    }

    Role.prototype.beAttack = function (attack, attackObject) {
        var eft = new Animation({
            url: "res/tools/dungeon/res/effect/",
            name: "attackedEft1_000",
            format: "png",
            start: 0,
            end: 11,
            frameRate: 18,
            x: -100,
            y: -125,
            scaleX: 1,
            scaleY: 1
        });
        eft.play(1, true);
        this.addChild(eft);
        if (this.data.hp.value < attack.hp.value) {
            this.data.hp.value = 0;
        } else {
            this.data.hp.value -= attack.hp.value;
        }
        this.data.hpLock = false;
        if (this.data.die.value) {
            this.playAction(Role.Action.DIE)
            this.die();
        }
    }

    Role.prototype.die = function () {
        this.data.lock.value = true;
        flower.Tween.to(this, 1.3, {alpha: 0}).call(function () {
            this.data.lock.value = false;
            this.data.mapData.objects.removeItem(this.data);
        }.bind(this));
    }

    /**
     * 路径改变
     */
    Role.prototype.onPathChange = function () {
        if (this.data.die.value == false && this.data.path.length && !this.moveFlag) {
            this.moveFlag = true;
            var point = this.data.path.shift();
            var position = MapUtils.transPointToPosition(point.x, point.y);
            if (point.time == 0) {
                this.playAction(Role.Action.STAND);
                this.moveFlag = false;
                this.data.position.x = position.x;
                this.data.position.y = position.y;
                this.onMoveComplete(point.x, point.y);
            } else {
                this.playAction(Role.Action.RUN, this.getNetDir(this.data.coord.x.value, this.data.coord.y.value, point.x, point.y));
                this.moveTween = flower.Tween.to(this.data.position, point.time / 1000, {
                    x: position.x,
                    y: position.y
                }, null, {
                    x: this.data.position.x.value,
                    y: this.data.position.y.value
                }).call(this.onMoveComplete, this, point.x, point.y);
            }
            return true;
        }
        return false;
    }

    Role.prototype.getNetDir = function (x, y, nextX, nextY) {
        var dir = "";
        if (nextY == y) {
            if (nextX == x + 1) {
                dir = Role.Dir.Right;
            } else if (nextX == x - 1) {
                dir = Role.Dir.Left;
            }
        } else {
            if (y % 2 == 0) {
                if (nextX == x) {
                    if (nextY == y + 1) {
                        dir = Role.Dir.RightUp;
                    } else if (nextY == y - 1) {
                        dir = Role.Dir.RightDown
                    }
                } else {
                    if (nextY == y + 1) {
                        dir = Role.Dir.LeftUp;
                    } else if (nextY == y - 1) {
                        dir = Role.Dir.LeftDown
                    }
                }
            } else {
                if (nextX == x) {
                    if (nextY == y + 1) {
                        dir = Role.Dir.LeftUp;
                    } else if (nextY == y - 1) {
                        dir = Role.Dir.LeftDown
                    }
                } else {
                    if (nextY == y + 1) {
                        dir = Role.Dir.RightUp;
                    } else if (nextY == y - 1) {
                        dir = Role.Dir.RightDown
                    }
                }
            }
        }
        return dir;
    }

    Role.prototype.onMoveComplete = function (x, y) {
        this.moveFlag = false;
        this.data.coord.x.value = x;
        this.data.coord.y.value = y;
        if (this.data.path.length && !this.moveFlag) {
            this.onPathChange();
        } else {
            if (this.action == Role.Action.RUN) {
                this.playAction(Role.Action.STAND);
            }
        }
    }

    Role.prototype.playAction = function (action, dir, count) {
        action = action || this.action;
        count = count || 1000000000;
        dir = dir || this.dir;
        if (action == this.action && dir == this.dir && action != Role.Action.ATTACK) {
            return;
        }
        if (this.show) {
            this.show.dispose();
        }
        this.action = action;
        this.dir = dir;
        var name = this.action + Role.Show[this.dir];
        var config = ConfigModel.getConfig("rolerAction").getItemWith("id", this.data.showType.value)[name];
        config = flower.ObjectDo.clone(config);
        config.url = "res/tools/dungeon/res/role/";
        config.x = -100;
        config.y = -100;
        config.save = true;
        config.saveId = this.data.showType.value;
        this.show = new Animation(config);
        this.show.play(count);
        this.show.once(flower.Event.COMPLETE, this.playActionComplete, this);
        this.show.scaleX = Role.ShowScaleX[dir];
        this.container.addChild(this.show);
    }

    Role.prototype.playActionComplete = function (e) {
        this.playAction(Role.Action.STAND);
    }

    Role.Action = {
        "STAND": "stand",
        "RUN": "run",
        "ATTACK": "attack",
        "DIE": "die"
    }

    Role.Dir = {
        "RightUp": "RightUp",
        "Right": "Right",
        "RightDown": "RightDown",
        "LeftUp": "LeftUp",
        "Left": "Left",
        "LeftDown": "LeftDown"
    }

    Role.Show = {
        "RightUp": "ru",
        "Right": "r",
        "RightDown": "rd",
        "LeftUp": "ru",
        "Left": "r",
        "LeftDown": "rd"
    }

    Role.ShowScaleX = {
        "RightUp": 1,
        "Right": 1,
        "RightDown": 1,
        "LeftUp": -1,
        "Left": -1,
        "LeftDown": -1
    }

    return Role;
})(flower.Group);

module.Role = Role;