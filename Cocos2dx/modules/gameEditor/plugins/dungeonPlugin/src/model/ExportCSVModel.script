var ExportCSVModel = (function () {

    /**
     * 点击信息
     * @param File
     * @constructor
     */
    function ExportCSVModel(file) {
        var path = file.path;
        var data = file.data;
        if (data == null) {
            var loader = new flower.URLLoader(path);
            loader.addListener(flower.Event.COMPLETE, this.loadComplete, this);
            loader.load();
        } else {
            this.export(data.value);
        }
    }

    ExportCSVModel.prototype.loadComplete = function (e) {
        this.export(e.data);
    }

    ExportCSVModel.prototype.export = function (data) {
        var content = "id,name,trigger_type,delay,condition,effect_type,effect_params,times,open,status\n";
        var triggers = data.triggers;
        for (var i = 0; i < triggers.length; i++) {
            var trigger = triggers[i];
            var start = trigger.startValue;
            content += trigger.itemId + ",name," + trigger.startCondition + "," + trigger.delay + ",\"";
            if (trigger.startCondition == 1) { //进入副本开启
                content += "";
            } else if (trigger.startCondition == 2) { //移动触发
                content += "[" + start.armyType;
                for (var p = 0; p < start.points.length; p++) {
                    content += ",[" + start.points[p].x + "," + start.points[p].y + "]";
                }
                content += "]";
            } else if (trigger.startCondition == 3) { //hp触发
                content += "[" + start.tag + "," + start.hp + "]";
            } else if (trigger.startCondition == 4) { //通关触发
                content += "[" + start.type + "," + start.param + "]";
            } else if (trigger.startCondition == 5) { //触发器触发
                content += "";
            } else if (trigger.startCondition == 6) { //全队灭亡
                content += "[" + start.type + "," + start.count + "]";
            } else if (trigger.startCondition == 7) { //全队灭亡
                content += "[";
                for (var t = 0; t < trigger.startValue.tags.length; t++) {
                    content += trigger.startValue.tags[t] + (t < trigger.startValue.tags.length - 1 ? "," : "");
                }
                content += "]";
            }
            content += "\",";
            var type = "\"[";
            var param = "[";
            for (var p = 0; p < trigger.effects.length; p++) {
                var effect = trigger.effects[p];
                var val = effect.effectValue;
                type += effect.type + (p < trigger.effects.length - 1 ? "," : "");
                if (effect.type == 1) { //刷怪 [[[2603101,[7,9],[8,10],50],[2603102,[10,10],[9,8],51]]]
                    param += "[";
                    //[[2603101,[7,9],[8,10],50]
                    for (var m = 0; m < val.monsters.length; m++) {
                        var monster = val.monsters[m];
                        param += "[" + monster.id + ",";
                        param += "[" + monster.bornCoord.x + "," + monster.bornCoord.y + "],";
                        param += "[" + monster.moveCoord.x + "," + monster.moveCoord.y + "],";
                        param += monster.tag;
                        param += "]" + (m < val.monsters.length - 1 ? "," : "");
                    }
                    param += "]";
                } else if (effect.type == 2) { //直接伤害
                    param += "[]";
                } else if (effect.type == 3) { //buff
                    param += "[]"
                } else if (effect.type == 4) { //开关触发器
                    param += "[" + val.triggerId + "," + (val.operate == 0 ? 1 : 0) + "]";
                } else if (effect.type == 5) { //副本通关
                    param += "[" + 0 + "]";
                } else if (effect.type == 6) { //通关失败
                    param += "[" + 0 + "]";
                } else if (effect.type == 7) { //完成任务
                    param += "[" + val.missionId + "]";
                } else if (effect.type == 9) { //镜头移动 [[0,530],5000,2]
                    param += "[[" + val.coord.x + "," + val.coord.y + "]," + val.time + "," + val.pos + "]";
                } else if (effect.type == 10) { //锁定视野 [[0,0],1500,1200]
                    param += "[[" + val.rect.x + "," + val.rect.y + "]," + val.rect.width + "," + val.rect.height + "]";
                } else if (effect.type == 11) { //剧情对话 [3000,0,0,0,0,500001]
                    param += "[" + val.dialogId + "," + val.param1 + "," + val.param2 + "," + val.param3 + "," + val.param4 + "," + val.triggerId + "]";
                } else if (effect.type == 12) { //增加动画 [url,tag,type,layer,[x,y]]
                    param += "[\"\"" + val.url + "\"\"," + val.tag + "," + val.type + "," + val.layer + "," + val.ease + "," + val.easeTime + ",[" + val.x + "," + val.y + "]]";
                } else if (effect.type == 13) { //删除动画 [tag]
                    param += "[" + val.tag + "," + val.ease + "," + val.easeTime + "]";
                } else if (effect.type == 14) { //范围伤害 [[x,y],id]
                    param += "[[" + val.x + "," + val.y + "]," + val.id + "]";
                } else if (effect.type == 15) { //传送 [x,y]
                    param += "[" + val.x + "," + val.y + "]";
                } else if (effect.type == 16) { //增加阻挡点 [[x,y],[x,y]...]
                    param += "[";
                    for (var bp = 0; bp < val.points.length; bp++) {
                        param += "[" + val.points[bp].x + "," + val.points[bp].y + "]" + (bp < val.points.length - 1 ? "," : "");
                    }
                    param += "]";
                } else if (effect.type == 17) { //删除阻挡点 [[x,y],[x,y]...]
                    param += "[";
                    for (var bp = 0; bp < val.points.length; bp++) {
                        param += "[" + val.points[bp].x + "," + val.points[bp].y + "]" + (bp < val.points.length - 1 ? "," : "");
                    }
                    param += "]";
                } else if (effect.type == 18) { //暂停游戏 [0]
                    param += "[0]";
                } else if (effect.type == 19) { //继续游戏 [0]
                    param += "[0]";
                } else if (effect.type == 20) { //隐藏全部 [0]
                    param += "[0]";
                } else if (effect.type == 21) { //显示全部 [0]
                    param += "[0]";
                } else if (effect.type == 22) { //隐藏格子上对象 [[x,y],[x,y]...]
                    param += "[";
                    for (var bp = 0; bp < val.points.length; bp++) {
                        param += "[" + val.points[bp].x + "," + val.points[bp].y + "]" + (bp < val.points.length - 1 ? "," : "");
                    }
                    param += "]";
                } else if (effect.type == 23) { //显示格子上对象 [[x,y],[x,y]...]
                    param += "[";
                    for (var bp = 0; bp < val.points.length; bp++) {
                        param += "[" + val.points[bp].x + "," + val.points[bp].y + "]" + (bp < val.points.length - 1 ? "," : "");
                    }
                    param += "]";
                }
                param += (p < trigger.effects.length - 1 ? "," : "");
            }
            type += "]\"";
            param += "]";
            content += type + "," + "\"" + param + "\"";
            content += "," + trigger.count + "," + (trigger.open ? "1" : "0") + "," + trigger.status + "\n";
        }
        if (window) {
            var url = "res/tools/dungeon/res/save/" + (new Date()).getTime() + ".txt";
            (new flower.RemoteFile(url)).saveText(content, function () {
                window.open(flower.RemoteServer.getInstance().httpURL + url);                 //在另外新建窗口中打开链接
            });
        } else {
            software.Alert.tip("请用浏览器打开应用，否则不能用此功能");
        }
    }

    return ExportCSVModel;
})();

module.ExportCSVModel = ExportCSVModel;