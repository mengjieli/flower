var Camera = (function () {


    function Camera() {
    }

    Camera.prototype.setData = function (val, settings) {
        this.data = val;
        this.settings = settings;
        this.data.addListener("tweenTo", function (e) {
            var info = this.data.tweenTo.value;
            this.tweenTo(info.time, info.x, info.y, info.type);
        }, this);
        settings.isPlaying.addListener(flower.Event.UPDATE, function (e) {
            if (this.settings.isPlaying.value) {
                if (this.tween) {
                    this.tween.play();
                }
            } else {
                if (this.tween) {
                    this.tween.stop();
                }
            }
        }, this);
        settings.reset.addListener(flower.Event.UPDATE, function (e) {
            this.reset();
        }, this);
    }

    Camera.prototype.reset = function () {
        if (this.tween) {
            this.tween.dispose();
            this.tween = null;
        }
    }

    Camera.prototype.moveTo = function (x, y) {
        var width = this.data.width.value;
        var height = this.data.height.value;
        var rangeX = this.data.viewport.x.value;
        var rangeY = this.data.viewport.y.value;
        var rangeWidth = this.data.viewport.width.value;
        var rangeHeight = this.data.viewport.height.value;
        if (x < rangeX) {
            x = rangeX;
        }
        if (x + width > rangeWidth) {
            x = rangeWidth - width;
        }
        if (y < rangeY) {
            y = rangeY;
        }
        if (y + height > rangeHeight) {
            y = rangeHeight - height;
        }
        this.data.x.value = x;
        this.data.y.value = y;
    }

    Camera.prototype.tweenTo = function (time, x, y, pos) {
        console.log(x, y, pos, this.data);
        switch (pos) {
            case 2:
                y = y - this.data.height.value * .5;
                break;
            case 3:
                y = y - this.data.height.value;
                break;
            case 4:
                x = x - this.data.width.value * .5;
                y = y - this.data.height.value;
                break;
            case 5:
                x = x - this.data.width;
                y = y - this.data.height.value;
                break;
            case 6:
                x = x - this.data.width.value;
                y = y - this.data.height.value * .5;
                break;
            case 7:
                x = x - this.data.width.value;
                break;
            case 8:
                x = x - this.data.width.value * .5;
                break;
            case 9:
                x = x - this.data.width.value * .5;
                y = y - this.data.height.value * .5;
                break;
        }
        trace(x, y);
        if (time == 0) {
            this.moveTo(x, y);
        } else {
            if (this.tween) {
                this.tween.dispose();
            }
            this.tween = flower.Tween.to(this, time / 1000, {
                x: x,
                y: y
            }).call(function () {
                this.tween = null;
            }.bind(this));
        }
    }


    Camera.prototype.screenSizeChange = function () {

    }

    Object.defineProperty(Camera.prototype, "x", {
        get: function () {
            return this.data.x.value;
        },
        set: function (val) {
            this.moveTo(val, this.data.y.value);
        },
        enumerable: true,
        configurable: true
    });

    Object.defineProperty(Camera.prototype, "y", {
        get: function () {
            return this.data.y.value;
        },
        set: function (val) {
            this.moveTo(this.data.x.value, val);
        },
        enumerable: true,
        configurable: true
    });

    return Camera;
})();


module.Camera = Camera;