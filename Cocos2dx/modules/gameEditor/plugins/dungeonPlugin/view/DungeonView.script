function init() {
    //showDetailPanel
    this.tree.clickItem = this.onClickItem.bind(this);
    this.direction = new flower.ArrayValue();
    this.tree.dataProvider = this.direction;
    this.flushDirection();
    this.expand("trigger");
}

function flushDirection() {
    this.direction.removeAll();
    this.addDirection("trigger", "root", "触发器", [{
        "label": "添加触发器",
        "click": function (target) {
            var trigger = flower.DataManager.createData("dg.TriggerData");
            var id = this.data.parser.itemId;
            trigger.itemId.value = id;
            trigger.name.value = "触发器" + id;
            this.data.data.triggers.push(trigger);
            this.data.parser.save();
            this.addTriggerToDirection(trigger);
        }.bind(this)
    }]);
    var triggerList = this.data.data.triggers;
    for (var i = 0; i < triggerList.length; i++) {
        var trigger = triggerList[i];
        this.addTriggerToDirection(trigger);
        var effects = trigger.effects;
        for (var e = 0; e < effects.length; e++) {
            this.addEffectToDirection(trigger, effects[e]);
        }
    }
}

function expand(url) {
    this.tree.viewport.expand(url);
}

function onClickItem(e) {
    var item = e.data;
    if (item.type == "trigger") {
        if (!this.triggerDetailPanel) {
            this.triggerDetailPanel = new dg.TriggerDetailPanel();
        }
        this.triggerDetailPanel.save = this.data.parser.save.bind(this.data.parser);
        this.triggerDetailPanel.data = item.data;
        showDetailPanel("Dungeon.trigger", item.data, this.triggerDetailPanel);
    } else if (item.type == "effect") {
        if (!this.effectDetailPanel) {
            this.effectDetailPanel = new dg.EffectDetailPanel();
        }
        this.effectDetailPanel.save = this.data.parser.save.bind(this.data.parser);
        this.effectDetailPanel.data = item.data.effect;
        showDetailPanel("Dungeon.effect", item.data, this.effectDetailPanel);
    }
}

function addTriggerToDirection(trigger) {
    var path = "trigger/" + trigger.itemId.value;
    this.addDirection(path, "trigger", trigger.name, [
        {
            "label": "添加效果",
            "click": function (target) {
                var trigger = target.data;
                var effect = flower.DataManager.createData("dg.TriggerEffectData");
                effect.itemId.value = this.data.parser.itemId;
                effect.name.value = "效果" + effect.itemId.value;
                trigger.effects.push(effect);
                this.data.parser.save();
                this.addEffectToDirection(trigger, effect);
            }.bind(this)
        },
        {
            "label": "删除",
            "click": function (target) {
                var dungeonData = this.data.data;
                dungeonData.triggers.removeItem(trigger);
                this.data.parser.save();
                this.direction.removeItem(target);
            }.bind(this)
        },
        {
            "label": "上移",
            "click": function (target) {
                var dungeonData = this.data.data;
                var index = dungeonData.triggers.getItemIndex(trigger);
                dungeonData.triggers.setItemIndex(trigger, index - 1);
                this.moveDirectionUp(target);
                this.data.parser.save();
            }.bind(this)
        },
        {
            "label": "下移",
            "click": function (target) {
                var dungeonData = this.data.data;
                var index = dungeonData.triggers.getItemIndex(trigger);
                dungeonData.triggers.setItemIndex(trigger, index + 1);
                this.moveDirectionDown(target);
                this.data.parser.save();
            }.bind(this)
        },
        {
            "label": "粘贴效果",
            "isVisible": function () {
                return module.copyInfo && module.copyInfo.type == "Effect" ? true : false;
            },
            "click": function (target) {
                flower.breakPoint();
                var effect = flower.DataManager.createData("dg.TriggerEffectData");
                effect.value = module.copyInfo.value;
                effect.itemId.value = this.data.parser.itemId;
                var trigger = target.data;
                trigger.effects.push(effect);
                this.data.parser.save();
                this.addEffectToDirection(trigger, effect);
            }.bind(this)
        }
    ], trigger, trigger.color);
}

function moveDirectionUp(target) {
    var index = this.direction.getItemIndex(target);
    for (var i = index - 1; i >= 0; i--) {
        var dir = this.direction[i];
        if (flower.Path.isPeerDirection(target.path, dir.path)) {
            this.direction.setItemIndex(target, i);
            break;
        }
    }
}

function moveDirectionDown(target) {
    var index = this.direction.getItemIndex(target);
    for (var i = index + 1; i < this.direction.length; i++) {
        var dir = this.direction[i];
        if (flower.Path.isPeerDirection(target.path, dir.path)) {
            this.direction.setItemIndex(target, i);
            break;
        }
    }
}

function addEffectToDirection(trigger, effect) {
    var path = "trigger/" + trigger.itemId.value + "/" + effect.itemId.value + ".effect";
    this.addFile(path, "effect", effect.name, [
        {
            "label": "删除",
            "click": function (target) {
                target.data.trigger.effects.removeItem(target.data.effect);
                this.data.parser.save();
                this.direction.removeItem(target);
            }.bind(this)
        },
        {
            "label": "屏蔽触发器",
            "click": function (target) {
                target.data.effect.invalid = !target.data.effect.invalid.value;
            }.bind(this)
        },
        {
            "label": "复制",
            "click": function (target) {
                var effect = target.data.effect;
                module.copyInfo = {
                    "type": "Effect",
                    "value": effect.value
                }
            }.bind(this)
        }
    ], {trigger: trigger, effect: effect}, effect.color);
}


function addDirection(path, type, name, menuList, data, color) {
    var dir = new software.Direction(path, name, type, null, data);
    dir.color = color;
    var menu = null;
    if (menuList && menuList.length) {
        menu = {
            "menu": menuList,
            "target": dir,
            "click": function (info, item) {
                if (item.click) {
                    item.click(info);
                }
            }
        };
    }
    dir.menu = menu;
    return this.direction.push(dir);
}

function addFile(path, type, name, menuList, data, color) {
    var dir = new software.File(path, name, type, null, data);
    dir.color = color;
    var menu = null;
    if (menuList && menuList.length) {
        menu = {
            "menu": menuList,
            "target": dir,
            "click": function (info, item) {
                if (item.click) {
                    item.click(info);
                }
            }
        };
    }
    dir.menu = menu;
    return this.direction.push(dir);
}

function setData(val) {
    _super.prototype.setData.call(this, val);
    this.data.data.settings.background.addListener(flower.Event.UPDATE, function () {
        this.data.parser.save();
    }, this);
    this.data.data.screenWidth.addListener(flower.Event.UPDATE, function () {
        this.data.parser.save();
    }, this);
    this.data.data.screenHeight.addListener(flower.Event.UPDATE, function () {
        this.data.parser.save();
    }, this);
    this.backgroundComboBox.value = this.data.data.settings.background;
    this.showGridCheckBox.value = this.data.data.settings.showGrid;
    this.firstComboBox.value = this.data.data.settings.first;
}

registerView("Dungeon", DungeonView);