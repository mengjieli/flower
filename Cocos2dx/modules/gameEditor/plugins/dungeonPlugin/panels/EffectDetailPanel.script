function init() {
    var container = this.container;
    var labels = ["名称", "类型"];
    var attributes = ["name", "type"];
    var inputFalse = {
        //"itemId": true
    };
    var dropDownList = {
        "type": true
    };
    this.attributes = attributes;
    for (var i = 0; i < attributes.length; i++) {
        var atr1 = attributes[i];
        var label1 = labels[i];
        var fxml =
            '<f:Group horizontalCenter="0" xmlns:f="flower" xmlns:s="modules/software/module.json">' +
            '<f:Label horizontalCenter="-55" width="60" text="' + label1 + '" verticalCenter="0"/>';
        if (dropDownList[atr1]) {
            fxml += '<s:ComboBox id="' + atr1 + 'ComboBox" horizontalCenter="30" width="100" verticalCenter="0"/>';
        } else {
            fxml += '<s:Input id="' + atr1 + 'Input" horizontalCenter="30" width="100" verticalCenter="0" ' + (inputFalse[atr1] ? 'touchEnabled="false"' : '') + '/>';
        }
        fxml += '</f:Group>';
        var ui = (new flower.UIParser()).parseUI(fxml);
        container.addChild(ui);
        if (dropDownList[atr1]) {
            this[atr1 + "ComboBox"] = ui[atr1 + "ComboBox"];
        } else {
            this[atr1 + "Input"] = ui[atr1 + "Input"];
        }
    }

    var fxml =
        '<f:ViewStack percentWidth="100" top="55" bottom="0" xmlns:f="flower" xmlns:s="modules/software/module.json" xmlns:dg="modules/gameEditor/plugins/dungeonPlugin/module.json">' +
        '<f:Group/>' +
        '<dg:FlushMonsterEffect/>' +
        '<dg:HurtEffect/>' +
        '<f:Group/>' +
        '<dg:StartTriggerEffect/>' +
        '<f:Group/>' +
        '<f:Group/>' +
        '<dg:MissionCompleteEffect/>' +
        '<f:Group/>' +
        '<dg:CameraMoveEffect/>' +
        '<dg:CameraRangeEffect/>' +
        '<dg:DialogEffect/>' +
        '<dg:AddAnimationEffect/>' +
        '<dg:RemoveAnimationEffect/>' +
        '<dg:DamageRangeEffect/>' +
        '<dg:TransformEffect/>' +
        '<dg:AddBlockEffect/>' +
        '<dg:RemoveBlockEffect/>' +
        '<f:Group/>' +
        '<f:Group/>' +
        '<dg:HideAllEffect/>' +
        '<dg:ShowAllEffect/>' +
        '<dg:HideGridEffect/>' +
        '<dg:ShowGridEffect/>' +
        '</f:ViewStack>';
    this.viewStack = (new flower.UIParser()).parseUI(fxml);
    container.addChild(this.viewStack);
}

function set save(func) {
    this.__save = func;
}

function get save() {
    return this.__save;
}

function setData(val) {
    _super.prototype.setData.call(this, val);
    var changeViewStack = function (e) {
        this.viewStack.selectedIndex = this.data.type.value;
        if (e) {
            if (this.data.type.value == 1) {
                this.data.effectValue = flower.DataManager.createData("dg.FlushMonsterEffect");
            } else if (this.data.type.value == 2) {
                this.data.effectValue = flower.DataManager.createData("dg.HurtEffect");
            } else if (this.data.type.value == 4) {
                this.data.effectValue = flower.DataManager.createData("dg.StartTriggerEffect");
            } else if (this.data.type.value == 7) {
                this.data.effectValue = flower.DataManager.createData("dg.MissionCompleteEffect");
            } else if (this.data.type.value == 9) {
                this.data.effectValue = flower.DataManager.createData("dg.CameraMoveEffect");
            } else if (this.data.type.value == 10) {
                this.data.effectValue = flower.DataManager.createData("dg.CameraRangeEffect");
            } else if (this.data.type.value == 11) {
                this.data.effectValue = flower.DataManager.createData("dg.DialogEffect");
            } else if (this.data.type.value == 12) {
                this.data.effectValue = flower.DataManager.createData("dg.AddAnimationEffect");
            } else if (this.data.type.value == 13) {
                this.data.effectValue = flower.DataManager.createData("dg.RemoveAnimationEffect");
            } else if (this.data.type.value == 14) {
                this.data.effectValue = flower.DataManager.createData("dg.DamageRangeEffect");
            } else if (this.data.type.value == 15) {
                this.data.effectValue = flower.DataManager.createData("dg.TransformEffect");
            } else if (this.data.type.value == 16) {
                this.data.effectValue = flower.DataManager.createData("dg.AddBlockEffect");
            } else if (this.data.type.value == 17) {
                this.data.effectValue = flower.DataManager.createData("dg.RemoveBlockEffect");
            } else if (this.data.type.value == 18) {
                this.data.effectValue = flower.DataManager.createData("dg.PauseEffect");
            } else if (this.data.type.value == 19) {
                this.data.effectValue = flower.DataManager.createData("dg.ContinueEffect");
            } else if (this.data.type.value == 20) {
                this.data.effectValue = flower.DataManager.createData("dg.HideAllEffect");
            } else if (this.data.type.value == 21) {
                this.data.effectValue = flower.DataManager.createData("dg.ShowAllEffect");
            } else if (this.data.type.value == 22) {
                this.data.effectValue = flower.DataManager.createData("dg.HideGridEffect");
            } else if (this.data.type.value == 23) {
                this.data.effectValue = flower.DataManager.createData("dg.ShowGridEffect");
            }


            else if (this.data.type.value == 12) { //暂时不需要
                this.data.effectValue = flower.DataManager.createData("dg.StartEffect");
            } else {
                this.data.effectValue = null;
            }
            this.save();
        }
        this.viewStack.selectedChild.save = this.save;
        this.viewStack.selectedChild.data = this.data.effectValue;
    };
    changeViewStack.call(this);
    this.data.type.addListener(flower.Event.UPDATE, changeViewStack, this);
    var attributes = this.attributes;
    for (var i = 0; i < attributes.length; i++) {
        var atr = attributes[i];
        (function (atr) {
            if (this[atr + "Input"]) {
                this[atr + "Input"].value = this.data[atr];
                this.data[atr].addListener(flower.Event.UPDATE, function (e) {
                    this.save();
                }, this);
            } else if (this[atr + "ComboBox"]) {
                this[atr + "ComboBox"].value = this.data[atr];
                this.data[atr].addListener(flower.Event.UPDATE, function (e) {
                    this.save();
                }, this);
            }
        }).bind(this)(atr);
    }
}
