function init() {
    this.list.dataProvider = new flower.ArrayValue();
    this.scrollerList.rightClick = function () {
        flower.MenuManager.showMenu(new software.Menu(
            {
                "menu": [
                    {
                        "label": "添加怪物",
                        "type": "addMonster"
                    },
                    {
                        "label": "删除全部怪物",
                        "type": "removeAll"
                    }
                ],
                "click": this.menuFunction.bind(this)
            }
        ));
    }.bind(this);
}

function menuFunction(target, item) {
    if (item.type == "addMonster") {
        var array = this.list.dataProvider;
        var monster = flower.DataManager.createData("dg.FlushMonsterEffectItem");
        monster.bornCoord.x.addListener(flower.Event.UPDATE, function (e) {
            monster.moveCoord.x = monster.bornCoord.x.value;
        });
        monster.bornCoord.y.addListener(flower.Event.UPDATE, function (e) {
            monster.moveCoord.y = monster.bornCoord.y.value;
        });
        var data = {
            "monster": monster,
        };
        data.menu = {
            "target": data,
            "menu": [
                {
                    "label": "删除",
                    "type": "delMonster"
                },
                {
                    "label": "添加怪物",
                    "type": "addMonster"
                },
                {
                    "label": "删除全部怪物",
                    "type": "removeAll"
                }
            ],
            "click": this.menuFunction.bind(this)
        }
        monster.id.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.tag.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.bornCoord.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.bornCoord.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.moveCoord.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.moveCoord.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.ai.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        array.push(data);
        this.data.monsters.push(monster);
    } else if (item.type == "removeAll") {
        software.Alert.show("确认全部删除?", {
            sureCall: function () {
                this.list.dataProvider.removeAll();
                this.data.monsters.removeAll();
            },
            sureThis: this
        });
    } else if (item.type == "delMonster") {
        this.list.dataProvider.removeItem(target);
        this.data.monsters.removeItem(target.monster);
    }
    this.save();
}

function setData(val) {
    _super.prototype.setData.call(this, val);
    this.list.dataProvider.removeAll();
    for (var i = 0; i < this.data.monsters.length; i++) {
        var monster = this.data.monsters[i];
        var data = {
            "monster": monster,
        };
        data.menu = {
            "target": data,
            "menu": [
                {
                    "label": "删除",
                    "type": "delMonster"
                },
                {
                    "label": "添加怪物",
                    "type": "addMonster"
                },
                {
                    "label": "删除全部怪物",
                    "type": "removeAll"
                }
            ],
            "click": this.menuFunction.bind(this)
        }
        monster.id.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.bornCoord.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.bornCoord.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.moveCoord.x.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.moveCoord.y.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        monster.ai.addListener(flower.Event.UPDATE, function (e) {
            this.save();
        }, this);
        this.list.dataProvider.push(data);
    }
}

function set save(func) {
    this.__save = func;
}

function get save() {
    return this.__save;
}