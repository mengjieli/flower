var QATestAccount = (function () {

    function QATestAccount(data) {
        this.data = data;
    }

    QATestAccount.prototype.login = function (qadata) {
        this.qadata = qadata;
        this.httpIp = this.qadata.httpServer.value;
        this.gameIp = this.qadata.gameServer.value;
        this.data.isLogining = true;
        this.data.token = this.getToken();
        this.tryTime = 10;
        this.checkLogin();
    }

    QATestAccount.prototype.checkLogin = function () {
        if(!this.tryTime) {
            this.data.isLogining = false;
            this.data.invalid = true;
            return;
        }
        var http = new flower.URLLoader("http://" + this.httpIp + ":13215/empery/account/promotion/check_login?loginName=" + this.data.user.value + "&password=" + this.data.password.value + "&token=" + this.data.token.value);
        http.load();
        http.addListener(flower.Event.COMPLETE, this.checkLoginComplete, this);
        http.addListener(flower.Event.ERROR, this.checkLoginError, this);
        this.tryTime--;
    }

    QATestAccount.prototype.checkLoginComplete = function (e) {
        try {
            var config = JSON.parse(e.data);
            var active = config.hasBeenActivated;
            var errCode = config.err_code;
            if (errCode != 0) {
                this.checkLogin();
            } else {
                if (!active) {
                    this.active();
                } else {
                    this.connectGame();
                }
            }
        } catch (e) {
            setTimeout(this.checkLogin.bind(this),1000);
        }
    }

    QATestAccount.prototype.checkLoginError = function (e) {
        setTimeout(this.checkLogin.bind(this),1000);
    }

    QATestAccount.prototype.active = function () {
        if(!this.tryTime) {
            this.data.isLogining = false;
            this.data.invalid = true;
            return;
        }
        var http = new flower.URLLoader("http://" + this.httpIp + ":13215/empery/account/promotion/activate?loginName=" + this.data.user.value + "&initialNick=" + this.data.user.value);
        http.load();
        http.addListener(flower.Event.COMPLETE, this.activeComplete, this);
        http.addListener(flower.Event.ERROR, this.activeError, this);
        this.tryTime--;
    }

    QATestAccount.prototype.activeComplete = function (e) {
        try {
            var config = JSON.parse(e.data);
            var errCode = config.err_code;
            if (errCode != 0) {
                setTimeout(this.checkLogin.bind(this),1000);
            } else {
                this.connectGame();
            }
        } catch (e) {
            setTimeout(this.checkLogin.bind(this),1000);
        }
    }

    QATestAccount.prototype.activeError = function (e) {
        setTimeout(this.checkLogin.bind(this),1000);
    }

    QATestAccount.prototype.connectGame = function () {
        this.net = new flower.VBWebSocket();
        this.net.connect(this.gameIp, 13211, "/empery");
        this.net.addListener(flower.Event.CONNECT, this.onConnectGame, this);
        this.net.addListener(flower.Event.CLOSE, this.onDisconnectGame, this);
        this.netDispatcher = new QATestNet(this.net);
        this.netDispatcher.addListener(299, this.receiveLoginBack, this)
    }

    QATestAccount.prototype.onConnectGame = function () {
        //uint        platformId      // 登录类型，以后需要使用第三方账号登录时表示平台 id
        //string      loginName       // 登录名或开放 id
        //string      loginToken      // 密码或登录令牌，不需要的时候置空
        var data = this.data;
        var msg = new flower.VByteArray();
        msg.writeUInt(200);
        msg.writeUInt(8500);
        msg.writeUTF(data.user.value);
        msg.writeUTF(data.token.value);
        this.net.send(msg);
        setTimeout(this.sendHeart.bind(this), 10000);
    }

    QATestAccount.prototype.receiveLoginBack = function (e) {
        if (!this.data.hasLogin.value) {
            this.data.isLogining = false;
            this.data.hasLogin.value = true;
            //ToDo
        }
    }

    QATestAccount.prototype.onDisconnectGame = function () {
        this.data.isLogining = false;
        this.data.hasLogin = false;
        this.net = null;
        this.qadata.currentLoginOut.value = this.qadata.currentLoginOut.value + 1;
    }

    QATestAccount.prototype.sendHeart = function () {
        var bytes = new flower.VByteArray();
        bytes.writeByte(0);
        bytes.writeByte(0);
        bytes.writeByte(0);
        bytes.writeByte(0);
        this.net.send(bytes);
        setTimeout(this.sendHeart.bind(this), 10000);
    }

    QATestAccount.prototype.getToken = function () {
        var str = "";
        str += new Date().getTime();
        str += "_";
        for (var i = 0; i < 32; ++i) {
            str += "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(Math.random() * 36)];
        }
        return str;
    }

    return QATestAccount;

})();

module.QATestAccount = QATestAccount;