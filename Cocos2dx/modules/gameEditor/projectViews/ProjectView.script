function init() {
    this.tree.clickItem = this.onClickItem.bind(this);
    this.loadPlugins();
    ProjectView.instance = this;
}

function loadPlugins() {
    this.path = "flower.json";
    var loader = new flower.URLLoader(editor.path + "plugins/Plugin.json");
    loader.addListener(flower.Event.COMPLETE, this.__onLoadPlugins, this);
    loader.load();
}

function __onLoadPlugins(e) {
    var list = e.data;
    if(flower.params.plugin) {
        list = [flower.params.plugin];
    }
    this.progress = flower.DataManager.getInstance().createData("ProgressData");
    this.progress.max.value = list.length;
    this.progress.tip.value = "加载插件";
    software.Loading.show(this.progress);
    this.__loadNextPlugin(0, list);
}

function __loadNextPlugin(index, list) {
    this.progress.current.value = index;
    if (index == list.length) {
        software.Loading.hide();
        this.loadPorject(this.path);
    } else {
        var script = "";
        script += "var registerParser = editor.PluginManager.registerParser;\n";
        script += "var registerView = editor.PluginManager.registerView;\n";
        script += "var setNewFilePanel = editor.PluginManager.setNewFilePanel;\n";
        script += "var setDirectionMenu = editor.PluginManager.setDirectionMenu;\n";
        script += "var setFileMenu = editor.PluginManager.setFileMenu;\n";
        script += "var addFile = editor.ProjectView.addFile;\n";
        script += "var saveFile = editor.ProjectView.saveFile;\n";
        script += "var deleteFile = editor.ProjectView.deleteFile;\n";
        script += "var showDetailPanel = editor.ProjectView.showDetailPanel;\n";
        var module = new flower.Module(editor.path + "plugins/" + list[index], script);
        module.addListener(flower.Event.COMPLETE, function (e) {
            index++;
            this.__loadNextPlugin(index, list);
        }, this);
        module.progress.percent.addListener(flower.Event.UPDATE, function (e) {
            this.progress.current.value = index + e.data.value;
        }, this);
        module.load();
    }
}

function loadPorject(url) {
    var loader = new flower.URLLoader(url);
    loader.addListener(flower.Event.COMPLETE, this.__onLoadConfig, this);
    loader.load();
}

function __onLoadConfig(e) {
    var cfg = this.config = e.data;
    this.plugins = {};
    this.title = cfg.name;
    var direction = this.tree.data.direction;
    direction.removeAll();
    for (var key in cfg.direction) {
        var item = cfg.direction[key];
        var path = "res/" + key;
        var file = this.addDirection(path, item.plugin, item.name);
        if (item.plugin) {
            this.plugins[item.plugin] = item;
        }
        direction.push(file);
        var fileList = item.list;
        var pluginName = item.plugin;
        for (var i = 0; i < fileList.length; i++) {
            direction.push(this.createFile(fileList[i], pluginName));
        }
    }
    if (flower.params.openDirection) {
        this.expand(decodeURIComponent(flower.params.openDirection));
    }
    if (flower.params.openFile) {
        this.openItem(decodeURIComponent(flower.params.openFile));
    }
}

function createFile(path, pluginName) {
    var file = new editor.File(false, path, flower.Path.getName(path), pluginName);
    var menu;
    var list = [
        {
            "label": "删除",
            "click": function (file) {
                flower.PopManager.pop(new editor.DeleteFilePanel(file), true, true);
            }
        }
    ]
    var fileMenu = editor.PluginManager.getFileMenu(pluginName);
    if (fileMenu) {
        list = list.concat(fileMenu);
    }
    if (list.length) {
        menu = {
            "menu": list,
            "target": file,
            "click": function (info, item) {
                if (item.click) {
                    item.click(info);
                }
            }
        };
    }
    file.menu = menu;
    return file;
}

function saveDirection() {
    (new flower.File(this.path)).saveText(JSON.stringify(this.config));
}

function openItem(url) {
    var direction = this.tree.data.direction;
    var item;
    for (var i = 0; i < direction.length; i++) {
        if (direction.getItemAt(i).path == url) {
            item = direction.getItemAt(i);
            break;
        }
    }
    if (item) {
        item.openFile();
    }
}

function expand(url) {
    this.tree.viewport.expand(url);
}

function onClickItem(e) {
    var item = e.data;
    if (item.isDirection == true) {

    } else {
        this.openItem(item.path);
    }

    //console.log(e);
    //var item = e.item;
    //if (item.plugin) {
    //    this.openItem(item.path);
    //    //item.openFile();
    //}
}

function addDirection(path, pluginName, name) {
    var file = new editor.File(true, path, name);
    var list;
    var menu = null;
    if (pluginName) {
        list = [];
        if (editor.PluginManager.getNewFilePanel(pluginName)) {
            list.push({
                "label": "新建" + name, click: function (info) {
                    var clazz = editor.PluginManager.getNewFilePanel(info.pluginName);
                    flower.PopManager.pop(new clazz(info), true, true);
                }
            });
        }
        var directionMenu = editor.PluginManager.getDirectionMenu(pluginName);
        if (directionMenu) {
            list = list.concat(directionMenu);
        }
        if (list.length) {
            menu = {
                "menu": list,
                "target": {
                    "path": path,
                    "pluginName": pluginName
                },
                "click": function (info, item) {
                    if (item.click) {
                        item.click(info);
                    }
                }
            };
        }
    }
    file.menu = menu;
    return file
}

function addFile(path, pluginName) {
    var direction = this.tree.data.direction;
    if(direction.getItemWith("path",path)) {
        return;
    }
    direction.push(this.createFile(path, pluginName));
    this.plugins[pluginName].list.push(path);
    this.saveDirection();
}

function deleteFile(path, pluginName) {
    var direction = this.tree.data.direction;
    direction.removeItemWith("path", path);
    var list = this.plugins[pluginName].list;
    for (var i = 0; i < list.length; i++) {
        if (path == list[i]) {
            list.splice(i, 1);
            break;
        }
    }
    this.saveDirection();
}

function saveFile(path, content, back, thisObj, type) {
    if (type == null) {
        (new flower.File(path)).saveText(content, back, thisObj);
    } else if (type == "png") {
        (new flower.File(path)).savePNG(content, back, thisObj);
    }
}

static
function addFile(path, pluginName) {
    ProjectView.instance.addFile(path, pluginName);
}

static
function saveFile(path, content, back, thisObj, type) {
    ProjectView.instance.saveFile(path, content, back, thisObj, type);
}

static
function deleteFile(path, pluginName) {
    ProjectView.instance.deleteFile(path, pluginName);
}

static
function showDetailPanel(type, data, panel) {
    var event = new editor.ModuleEvent(editor.ModuleEvent.SHOW_DETAIL, {
        "type": type,
        data: data,
        panel: panel
    });
    editor.EventManager.instance.dispatch(event);
}

